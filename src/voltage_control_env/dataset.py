from abc import ABC, abstractmethod

import simbench as sb
import pandapower as pp
import pandas as pd
import numpy as np

class DataSet(ABC):
    '''
    Base class for managing the different network scenarios that will be trained on.
    '''
    def __init__(self) -> None:
        pass

    @abstractmethod
    def get_length(self):
        '''
        Return the length of the dataset (its number of elements)
        '''
        pass

    @abstractmethod
    def get_item(self, idx):
        '''
        Return the datapoint at index 0 <= idx < dataset.length.

        Note:
        The shape of the returned datapoint is expected to be of the following format:
        'load'
            'p_mw': np.array
            'q_mvar': np.array
        'sgen'
            'p_mw' : np.array
            'max_p_mw': np.array
        '''
        pass

class SimbenchDataSet(DataSet):
    '''
    Base class for Simbench-style datasets. Expects the data to be given as "absolute profiles" as defined by Simbench.
    '''

    def __init__(self, absolute_profiles, clean_threshold=1e-4):
        '''
        Initializes a SimbenchDataSet from the provided absolute profiles.
        Parameters:
            clean_threshold: Removing datapoints where the generated power for all sgen's is below this threshold (e.g. at night).
                             Setting clean_threshold = None disables the cleaning.
        '''
        super().__init__()
        self.clean_threshold = clean_threshold
        self.absolute_profiles = absolute_profiles

        # clean the data wrt to threshold
        if clean_threshold:
            self._clean_data(clean_threshold)

        # precompute length of dataset
        self.length = len(self.absolute_profiles[('sgen', 'p_mw')])


    def get_length(self):
        return self.length

    def get_item(self, idx):
        data_dict = {}

        # add all the important values
        for (component, metric), item in self.absolute_profiles.items():
            
            # Make sure that the component has data (is present in the dataset)
            if item.empty:
                continue

            if component not in data_dict:
                data_dict[component] = {}

            data_dict[component][metric] = np.array(item.iloc[idx])

        # add the action boundaries (1pu reference value) for the sgens
        data_dict['sgen']['max_p_mw'] = data_dict['sgen']['p_mw']
        # data_dict['sgen']['min_p_mw'] = np.zeros_like(data_dict['sgen']['p_mw'])
        
        # max_q = self._compute_q_bound(data_dict['sgen']['max_p_mw'])
        # data_dict['sgen']['max_q_mvar'] = max_q

        return data_dict


    # def _compute_q_bound(self, p_max, power_factor=0.95):
    #     '''
    #     Computes the Q-bound (max_q_mvar) given the maximum active power and the minimum power factor.
    #     '''

    #     # compute the apparent power
    #     s_max = p_max / power_factor

    #     # compute the q_max
    #     q_max = np.sqrt(s_max**2 - p_max**2)

    #     return q_max
    
    def _clean_data(self, threshold):
        '''
        Removes all datapoints from the dataset where the p_mw is below the given threshold.
        '''
        
        # finding all the rows for which all sgens are below the threshold
        sgen_data = self.absolute_profiles[('sgen', 'p_mw')]
        below_thres = (sgen_data < threshold).all(axis=1)

        # drop all rows where sgens are below threshold
        for key in self.absolute_profiles.keys():
            if self.absolute_profiles[key].empty:
                continue
            self.absolute_profiles[key] = self.absolute_profiles[key][~below_thres]

class SimbenchCodeDataSet(SimbenchDataSet):
    '''
    Initializes the SimbenchDataSet by downloading the profiles for the provided sb_code (e.g. "1-LV-rural1--0-sw").
    '''

    def __init__(self, sb_code, **kwargs):
        self.sb_code = sb_code
        self.net = sb.get_simbench_net(sb_code)
        absolute_profiles = sb.get_absolute_values(self.net, profiles_instead_of_study_cases=True)
        super().__init__(absolute_profiles=absolute_profiles, **kwargs)


class LoadedGridDataSet(SimbenchDataSet):
    '''
    Initializes a SimbenchDataSet loading the data given in the *.p file generated by the AEV Grid Dataset Generator (https://gitlab.iaew.rwth-aachen.de/aev/eonki_datasetgenerator).
    '''

    def __init__(self, net_path, **kwargs):
        self.net_path = net_path
        self.net = pp.from_pickle(net_path)
        super().__init__(absolute_profiles=self.net.profiles_abs, **kwargs)
        


